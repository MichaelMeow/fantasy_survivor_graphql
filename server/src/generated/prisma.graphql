# source: https://us1.prisma.sh/michael-harmon/fantasy_survivor/dev
# timestamp: Sun Dec 16 2018 19:40:47 GMT-0800 (PST)

type AggregateContestant {
  count: Int!
}

type AggregateEpisode {
  count: Int!
}

type AggregatePoints {
  count: Int!
}

type AggregateTribe {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Contestant implements Node {
  id: ID!
  fullName: String!
  firstName: String!
  lastName: String!
  photoURL: String!
  originalTribe: Tribe!
  currentTribe: Tribe!
}

"""A connection to a list of items."""
type ContestantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestantEdge]!
  aggregate: AggregateContestant!
}

input ContestantCreateInput {
  fullName: String!
  firstName: String!
  lastName: String!
  photoURL: String!
  originalTribe: TribeCreateOneInput!
  currentTribe: TribeCreateOneInput!
}

input ContestantCreateManyInput {
  create: [ContestantCreateInput!]
  connect: [ContestantWhereUniqueInput!]
}

input ContestantCreateOneInput {
  create: ContestantCreateInput
  connect: ContestantWhereUniqueInput
}

"""An edge in a connection."""
type ContestantEdge {
  """The item at the end of the edge."""
  node: Contestant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestantOrderByInput {
  id_ASC
  id_DESC
  fullName_ASC
  fullName_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  photoURL_ASC
  photoURL_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ContestantPreviousValues {
  id: ID!
  fullName: String!
  firstName: String!
  lastName: String!
  photoURL: String!
}

input ContestantScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestantScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestantScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestantScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  photoURL: String

  """All values that are not equal to given value."""
  photoURL_not: String

  """All values that are contained in given list."""
  photoURL_in: [String!]

  """All values that are not contained in given list."""
  photoURL_not_in: [String!]

  """All values less than the given value."""
  photoURL_lt: String

  """All values less than or equal the given value."""
  photoURL_lte: String

  """All values greater than the given value."""
  photoURL_gt: String

  """All values greater than or equal the given value."""
  photoURL_gte: String

  """All values containing the given string."""
  photoURL_contains: String

  """All values not containing the given string."""
  photoURL_not_contains: String

  """All values starting with the given string."""
  photoURL_starts_with: String

  """All values not starting with the given string."""
  photoURL_not_starts_with: String

  """All values ending with the given string."""
  photoURL_ends_with: String

  """All values not ending with the given string."""
  photoURL_not_ends_with: String
}

type ContestantSubscriptionPayload {
  mutation: MutationType!
  node: Contestant
  updatedFields: [String!]
  previousValues: ContestantPreviousValues
}

input ContestantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestantWhereInput
}

input ContestantUpdateDataInput {
  fullName: String
  firstName: String
  lastName: String
  photoURL: String
  originalTribe: TribeUpdateOneRequiredInput
  currentTribe: TribeUpdateOneRequiredInput
}

input ContestantUpdateInput {
  fullName: String
  firstName: String
  lastName: String
  photoURL: String
  originalTribe: TribeUpdateOneRequiredInput
  currentTribe: TribeUpdateOneRequiredInput
}

input ContestantUpdateManyDataInput {
  fullName: String
  firstName: String
  lastName: String
  photoURL: String
}

input ContestantUpdateManyInput {
  create: [ContestantCreateInput!]
  connect: [ContestantWhereUniqueInput!]
  disconnect: [ContestantWhereUniqueInput!]
  delete: [ContestantWhereUniqueInput!]
  update: [ContestantUpdateWithWhereUniqueNestedInput!]
  updateMany: [ContestantUpdateManyWithWhereNestedInput!]
  deleteMany: [ContestantScalarWhereInput!]
  upsert: [ContestantUpsertWithWhereUniqueNestedInput!]
}

input ContestantUpdateManyMutationInput {
  fullName: String
  firstName: String
  lastName: String
  photoURL: String
}

input ContestantUpdateManyWithWhereNestedInput {
  where: ContestantScalarWhereInput!
  data: ContestantUpdateManyDataInput!
}

input ContestantUpdateOneRequiredInput {
  create: ContestantCreateInput
  connect: ContestantWhereUniqueInput
  update: ContestantUpdateDataInput
  upsert: ContestantUpsertNestedInput
}

input ContestantUpdateWithWhereUniqueNestedInput {
  where: ContestantWhereUniqueInput!
  data: ContestantUpdateDataInput!
}

input ContestantUpsertNestedInput {
  update: ContestantUpdateDataInput!
  create: ContestantCreateInput!
}

input ContestantUpsertWithWhereUniqueNestedInput {
  where: ContestantWhereUniqueInput!
  update: ContestantUpdateDataInput!
  create: ContestantCreateInput!
}

input ContestantWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestantWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  photoURL: String

  """All values that are not equal to given value."""
  photoURL_not: String

  """All values that are contained in given list."""
  photoURL_in: [String!]

  """All values that are not contained in given list."""
  photoURL_not_in: [String!]

  """All values less than the given value."""
  photoURL_lt: String

  """All values less than or equal the given value."""
  photoURL_lte: String

  """All values greater than the given value."""
  photoURL_gt: String

  """All values greater than or equal the given value."""
  photoURL_gte: String

  """All values containing the given string."""
  photoURL_contains: String

  """All values not containing the given string."""
  photoURL_not_contains: String

  """All values starting with the given string."""
  photoURL_starts_with: String

  """All values not starting with the given string."""
  photoURL_not_starts_with: String

  """All values ending with the given string."""
  photoURL_ends_with: String

  """All values not ending with the given string."""
  photoURL_not_ends_with: String
  originalTribe: TribeWhereInput
  currentTribe: TribeWhereInput
}

input ContestantWhereUniqueInput {
  id: ID
}

type Episode implements Node {
  id: ID!
  number: Int!
  title: String!
  out(where: ContestantWhereInput, orderBy: ContestantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contestant!]
  episodeMessage: String
  airDate: String!
}

"""A connection to a list of items."""
type EpisodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EpisodeEdge]!
  aggregate: AggregateEpisode!
}

input EpisodeCreateInput {
  number: Int!
  title: String!
  episodeMessage: String
  airDate: String!
  out: ContestantCreateManyInput
}

input EpisodeCreateOneInput {
  create: EpisodeCreateInput
  connect: EpisodeWhereUniqueInput
}

"""An edge in a connection."""
type EpisodeEdge {
  """The item at the end of the edge."""
  node: Episode!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EpisodeOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  title_ASC
  title_DESC
  episodeMessage_ASC
  episodeMessage_DESC
  airDate_ASC
  airDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EpisodePreviousValues {
  id: ID!
  number: Int!
  title: String!
  episodeMessage: String
  airDate: String!
}

type EpisodeSubscriptionPayload {
  mutation: MutationType!
  node: Episode
  updatedFields: [String!]
  previousValues: EpisodePreviousValues
}

input EpisodeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EpisodeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpisodeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpisodeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EpisodeWhereInput
}

input EpisodeUpdateDataInput {
  number: Int
  title: String
  episodeMessage: String
  airDate: String
  out: ContestantUpdateManyInput
}

input EpisodeUpdateInput {
  number: Int
  title: String
  episodeMessage: String
  airDate: String
  out: ContestantUpdateManyInput
}

input EpisodeUpdateManyMutationInput {
  number: Int
  title: String
  episodeMessage: String
  airDate: String
}

input EpisodeUpdateOneRequiredInput {
  create: EpisodeCreateInput
  connect: EpisodeWhereUniqueInput
  update: EpisodeUpdateDataInput
  upsert: EpisodeUpsertNestedInput
}

input EpisodeUpsertNestedInput {
  update: EpisodeUpdateDataInput!
  create: EpisodeCreateInput!
}

input EpisodeWhereInput {
  """Logical AND on all given filters."""
  AND: [EpisodeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpisodeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpisodeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  episodeMessage: String

  """All values that are not equal to given value."""
  episodeMessage_not: String

  """All values that are contained in given list."""
  episodeMessage_in: [String!]

  """All values that are not contained in given list."""
  episodeMessage_not_in: [String!]

  """All values less than the given value."""
  episodeMessage_lt: String

  """All values less than or equal the given value."""
  episodeMessage_lte: String

  """All values greater than the given value."""
  episodeMessage_gt: String

  """All values greater than or equal the given value."""
  episodeMessage_gte: String

  """All values containing the given string."""
  episodeMessage_contains: String

  """All values not containing the given string."""
  episodeMessage_not_contains: String

  """All values starting with the given string."""
  episodeMessage_starts_with: String

  """All values not starting with the given string."""
  episodeMessage_not_starts_with: String

  """All values ending with the given string."""
  episodeMessage_ends_with: String

  """All values not ending with the given string."""
  episodeMessage_not_ends_with: String
  airDate: String

  """All values that are not equal to given value."""
  airDate_not: String

  """All values that are contained in given list."""
  airDate_in: [String!]

  """All values that are not contained in given list."""
  airDate_not_in: [String!]

  """All values less than the given value."""
  airDate_lt: String

  """All values less than or equal the given value."""
  airDate_lte: String

  """All values greater than the given value."""
  airDate_gt: String

  """All values greater than or equal the given value."""
  airDate_gte: String

  """All values containing the given string."""
  airDate_contains: String

  """All values not containing the given string."""
  airDate_not_contains: String

  """All values starting with the given string."""
  airDate_starts_with: String

  """All values not starting with the given string."""
  airDate_not_starts_with: String

  """All values ending with the given string."""
  airDate_ends_with: String

  """All values not ending with the given string."""
  airDate_not_ends_with: String
  out_every: ContestantWhereInput
  out_some: ContestantWhereInput
  out_none: ContestantWhereInput
}

input EpisodeWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPoints(data: PointsCreateInput!): Points!
  createEpisode(data: EpisodeCreateInput!): Episode!
  createTribe(data: TribeCreateInput!): Tribe!
  createContestant(data: ContestantCreateInput!): Contestant!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePoints(data: PointsUpdateInput!, where: PointsWhereUniqueInput!): Points
  updateEpisode(data: EpisodeUpdateInput!, where: EpisodeWhereUniqueInput!): Episode
  updateTribe(data: TribeUpdateInput!, where: TribeWhereUniqueInput!): Tribe
  updateContestant(data: ContestantUpdateInput!, where: ContestantWhereUniqueInput!): Contestant
  deleteUser(where: UserWhereUniqueInput!): User
  deletePoints(where: PointsWhereUniqueInput!): Points
  deleteEpisode(where: EpisodeWhereUniqueInput!): Episode
  deleteTribe(where: TribeWhereUniqueInput!): Tribe
  deleteContestant(where: ContestantWhereUniqueInput!): Contestant
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPoints(where: PointsWhereUniqueInput!, create: PointsCreateInput!, update: PointsUpdateInput!): Points!
  upsertEpisode(where: EpisodeWhereUniqueInput!, create: EpisodeCreateInput!, update: EpisodeUpdateInput!): Episode!
  upsertTribe(where: TribeWhereUniqueInput!, create: TribeCreateInput!, update: TribeUpdateInput!): Tribe!
  upsertContestant(where: ContestantWhereUniqueInput!, create: ContestantCreateInput!, update: ContestantUpdateInput!): Contestant!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyPointses(data: PointsUpdateManyMutationInput!, where: PointsWhereInput): BatchPayload!
  updateManyEpisodes(data: EpisodeUpdateManyMutationInput!, where: EpisodeWhereInput): BatchPayload!
  updateManyTribes(data: TribeUpdateManyMutationInput!, where: TribeWhereInput): BatchPayload!
  updateManyContestants(data: ContestantUpdateManyMutationInput!, where: ContestantWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPointses(where: PointsWhereInput): BatchPayload!
  deleteManyEpisodes(where: EpisodeWhereInput): BatchPayload!
  deleteManyTribes(where: TribeWhereInput): BatchPayload!
  deleteManyContestants(where: ContestantWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Points implements Node {
  id: ID!
  contestant: Contestant!
  episode: Episode!
  teamReward: Int!
  teamImmunity: Int!
  individualReward: Int!
  individualImmunity: Int!
  correctVote: Int!
  recievedVote: Int!
  out: Int!
  recievedClue: Int!
  foundIdol: Int!
  foundAdvantage: Int!
  heldIdol: Int!
  heldAdvantage: Int!
  quoted: Int!
  chosenForReward: Int!
  juryVotes: Int!
  special: Int!
  total: Int!
}

"""A connection to a list of items."""
type PointsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PointsEdge]!
  aggregate: AggregatePoints!
}

input PointsCreateInput {
  teamReward: Int!
  teamImmunity: Int!
  individualReward: Int!
  individualImmunity: Int!
  correctVote: Int!
  recievedVote: Int!
  out: Int!
  recievedClue: Int!
  foundIdol: Int!
  foundAdvantage: Int!
  heldIdol: Int!
  heldAdvantage: Int!
  quoted: Int!
  chosenForReward: Int!
  juryVotes: Int!
  special: Int!
  total: Int!
  contestant: ContestantCreateOneInput!
  episode: EpisodeCreateOneInput!
}

"""An edge in a connection."""
type PointsEdge {
  """The item at the end of the edge."""
  node: Points!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PointsOrderByInput {
  id_ASC
  id_DESC
  teamReward_ASC
  teamReward_DESC
  teamImmunity_ASC
  teamImmunity_DESC
  individualReward_ASC
  individualReward_DESC
  individualImmunity_ASC
  individualImmunity_DESC
  correctVote_ASC
  correctVote_DESC
  recievedVote_ASC
  recievedVote_DESC
  out_ASC
  out_DESC
  recievedClue_ASC
  recievedClue_DESC
  foundIdol_ASC
  foundIdol_DESC
  foundAdvantage_ASC
  foundAdvantage_DESC
  heldIdol_ASC
  heldIdol_DESC
  heldAdvantage_ASC
  heldAdvantage_DESC
  quoted_ASC
  quoted_DESC
  chosenForReward_ASC
  chosenForReward_DESC
  juryVotes_ASC
  juryVotes_DESC
  special_ASC
  special_DESC
  total_ASC
  total_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PointsPreviousValues {
  id: ID!
  teamReward: Int!
  teamImmunity: Int!
  individualReward: Int!
  individualImmunity: Int!
  correctVote: Int!
  recievedVote: Int!
  out: Int!
  recievedClue: Int!
  foundIdol: Int!
  foundAdvantage: Int!
  heldIdol: Int!
  heldAdvantage: Int!
  quoted: Int!
  chosenForReward: Int!
  juryVotes: Int!
  special: Int!
  total: Int!
}

type PointsSubscriptionPayload {
  mutation: MutationType!
  node: Points
  updatedFields: [String!]
  previousValues: PointsPreviousValues
}

input PointsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PointsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PointsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PointsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PointsWhereInput
}

input PointsUpdateInput {
  teamReward: Int
  teamImmunity: Int
  individualReward: Int
  individualImmunity: Int
  correctVote: Int
  recievedVote: Int
  out: Int
  recievedClue: Int
  foundIdol: Int
  foundAdvantage: Int
  heldIdol: Int
  heldAdvantage: Int
  quoted: Int
  chosenForReward: Int
  juryVotes: Int
  special: Int
  total: Int
  contestant: ContestantUpdateOneRequiredInput
  episode: EpisodeUpdateOneRequiredInput
}

input PointsUpdateManyMutationInput {
  teamReward: Int
  teamImmunity: Int
  individualReward: Int
  individualImmunity: Int
  correctVote: Int
  recievedVote: Int
  out: Int
  recievedClue: Int
  foundIdol: Int
  foundAdvantage: Int
  heldIdol: Int
  heldAdvantage: Int
  quoted: Int
  chosenForReward: Int
  juryVotes: Int
  special: Int
  total: Int
}

input PointsWhereInput {
  """Logical AND on all given filters."""
  AND: [PointsWhereInput!]

  """Logical OR on all given filters."""
  OR: [PointsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PointsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  teamReward: Int

  """All values that are not equal to given value."""
  teamReward_not: Int

  """All values that are contained in given list."""
  teamReward_in: [Int!]

  """All values that are not contained in given list."""
  teamReward_not_in: [Int!]

  """All values less than the given value."""
  teamReward_lt: Int

  """All values less than or equal the given value."""
  teamReward_lte: Int

  """All values greater than the given value."""
  teamReward_gt: Int

  """All values greater than or equal the given value."""
  teamReward_gte: Int
  teamImmunity: Int

  """All values that are not equal to given value."""
  teamImmunity_not: Int

  """All values that are contained in given list."""
  teamImmunity_in: [Int!]

  """All values that are not contained in given list."""
  teamImmunity_not_in: [Int!]

  """All values less than the given value."""
  teamImmunity_lt: Int

  """All values less than or equal the given value."""
  teamImmunity_lte: Int

  """All values greater than the given value."""
  teamImmunity_gt: Int

  """All values greater than or equal the given value."""
  teamImmunity_gte: Int
  individualReward: Int

  """All values that are not equal to given value."""
  individualReward_not: Int

  """All values that are contained in given list."""
  individualReward_in: [Int!]

  """All values that are not contained in given list."""
  individualReward_not_in: [Int!]

  """All values less than the given value."""
  individualReward_lt: Int

  """All values less than or equal the given value."""
  individualReward_lte: Int

  """All values greater than the given value."""
  individualReward_gt: Int

  """All values greater than or equal the given value."""
  individualReward_gte: Int
  individualImmunity: Int

  """All values that are not equal to given value."""
  individualImmunity_not: Int

  """All values that are contained in given list."""
  individualImmunity_in: [Int!]

  """All values that are not contained in given list."""
  individualImmunity_not_in: [Int!]

  """All values less than the given value."""
  individualImmunity_lt: Int

  """All values less than or equal the given value."""
  individualImmunity_lte: Int

  """All values greater than the given value."""
  individualImmunity_gt: Int

  """All values greater than or equal the given value."""
  individualImmunity_gte: Int
  correctVote: Int

  """All values that are not equal to given value."""
  correctVote_not: Int

  """All values that are contained in given list."""
  correctVote_in: [Int!]

  """All values that are not contained in given list."""
  correctVote_not_in: [Int!]

  """All values less than the given value."""
  correctVote_lt: Int

  """All values less than or equal the given value."""
  correctVote_lte: Int

  """All values greater than the given value."""
  correctVote_gt: Int

  """All values greater than or equal the given value."""
  correctVote_gte: Int
  recievedVote: Int

  """All values that are not equal to given value."""
  recievedVote_not: Int

  """All values that are contained in given list."""
  recievedVote_in: [Int!]

  """All values that are not contained in given list."""
  recievedVote_not_in: [Int!]

  """All values less than the given value."""
  recievedVote_lt: Int

  """All values less than or equal the given value."""
  recievedVote_lte: Int

  """All values greater than the given value."""
  recievedVote_gt: Int

  """All values greater than or equal the given value."""
  recievedVote_gte: Int
  out: Int

  """All values that are not equal to given value."""
  out_not: Int

  """All values that are contained in given list."""
  out_in: [Int!]

  """All values that are not contained in given list."""
  out_not_in: [Int!]

  """All values less than the given value."""
  out_lt: Int

  """All values less than or equal the given value."""
  out_lte: Int

  """All values greater than the given value."""
  out_gt: Int

  """All values greater than or equal the given value."""
  out_gte: Int
  recievedClue: Int

  """All values that are not equal to given value."""
  recievedClue_not: Int

  """All values that are contained in given list."""
  recievedClue_in: [Int!]

  """All values that are not contained in given list."""
  recievedClue_not_in: [Int!]

  """All values less than the given value."""
  recievedClue_lt: Int

  """All values less than or equal the given value."""
  recievedClue_lte: Int

  """All values greater than the given value."""
  recievedClue_gt: Int

  """All values greater than or equal the given value."""
  recievedClue_gte: Int
  foundIdol: Int

  """All values that are not equal to given value."""
  foundIdol_not: Int

  """All values that are contained in given list."""
  foundIdol_in: [Int!]

  """All values that are not contained in given list."""
  foundIdol_not_in: [Int!]

  """All values less than the given value."""
  foundIdol_lt: Int

  """All values less than or equal the given value."""
  foundIdol_lte: Int

  """All values greater than the given value."""
  foundIdol_gt: Int

  """All values greater than or equal the given value."""
  foundIdol_gte: Int
  foundAdvantage: Int

  """All values that are not equal to given value."""
  foundAdvantage_not: Int

  """All values that are contained in given list."""
  foundAdvantage_in: [Int!]

  """All values that are not contained in given list."""
  foundAdvantage_not_in: [Int!]

  """All values less than the given value."""
  foundAdvantage_lt: Int

  """All values less than or equal the given value."""
  foundAdvantage_lte: Int

  """All values greater than the given value."""
  foundAdvantage_gt: Int

  """All values greater than or equal the given value."""
  foundAdvantage_gte: Int
  heldIdol: Int

  """All values that are not equal to given value."""
  heldIdol_not: Int

  """All values that are contained in given list."""
  heldIdol_in: [Int!]

  """All values that are not contained in given list."""
  heldIdol_not_in: [Int!]

  """All values less than the given value."""
  heldIdol_lt: Int

  """All values less than or equal the given value."""
  heldIdol_lte: Int

  """All values greater than the given value."""
  heldIdol_gt: Int

  """All values greater than or equal the given value."""
  heldIdol_gte: Int
  heldAdvantage: Int

  """All values that are not equal to given value."""
  heldAdvantage_not: Int

  """All values that are contained in given list."""
  heldAdvantage_in: [Int!]

  """All values that are not contained in given list."""
  heldAdvantage_not_in: [Int!]

  """All values less than the given value."""
  heldAdvantage_lt: Int

  """All values less than or equal the given value."""
  heldAdvantage_lte: Int

  """All values greater than the given value."""
  heldAdvantage_gt: Int

  """All values greater than or equal the given value."""
  heldAdvantage_gte: Int
  quoted: Int

  """All values that are not equal to given value."""
  quoted_not: Int

  """All values that are contained in given list."""
  quoted_in: [Int!]

  """All values that are not contained in given list."""
  quoted_not_in: [Int!]

  """All values less than the given value."""
  quoted_lt: Int

  """All values less than or equal the given value."""
  quoted_lte: Int

  """All values greater than the given value."""
  quoted_gt: Int

  """All values greater than or equal the given value."""
  quoted_gte: Int
  chosenForReward: Int

  """All values that are not equal to given value."""
  chosenForReward_not: Int

  """All values that are contained in given list."""
  chosenForReward_in: [Int!]

  """All values that are not contained in given list."""
  chosenForReward_not_in: [Int!]

  """All values less than the given value."""
  chosenForReward_lt: Int

  """All values less than or equal the given value."""
  chosenForReward_lte: Int

  """All values greater than the given value."""
  chosenForReward_gt: Int

  """All values greater than or equal the given value."""
  chosenForReward_gte: Int
  juryVotes: Int

  """All values that are not equal to given value."""
  juryVotes_not: Int

  """All values that are contained in given list."""
  juryVotes_in: [Int!]

  """All values that are not contained in given list."""
  juryVotes_not_in: [Int!]

  """All values less than the given value."""
  juryVotes_lt: Int

  """All values less than or equal the given value."""
  juryVotes_lte: Int

  """All values greater than the given value."""
  juryVotes_gt: Int

  """All values greater than or equal the given value."""
  juryVotes_gte: Int
  special: Int

  """All values that are not equal to given value."""
  special_not: Int

  """All values that are contained in given list."""
  special_in: [Int!]

  """All values that are not contained in given list."""
  special_not_in: [Int!]

  """All values less than the given value."""
  special_lt: Int

  """All values less than or equal the given value."""
  special_lte: Int

  """All values greater than the given value."""
  special_gt: Int

  """All values greater than or equal the given value."""
  special_gte: Int
  total: Int

  """All values that are not equal to given value."""
  total_not: Int

  """All values that are contained in given list."""
  total_in: [Int!]

  """All values that are not contained in given list."""
  total_not_in: [Int!]

  """All values less than the given value."""
  total_lt: Int

  """All values less than or equal the given value."""
  total_lte: Int

  """All values greater than the given value."""
  total_gt: Int

  """All values greater than or equal the given value."""
  total_gte: Int
  contestant: ContestantWhereInput
  episode: EpisodeWhereInput
}

input PointsWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  pointses(where: PointsWhereInput, orderBy: PointsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Points]!
  episodes(where: EpisodeWhereInput, orderBy: EpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Episode]!
  tribes(where: TribeWhereInput, orderBy: TribeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tribe]!
  contestants(where: ContestantWhereInput, orderBy: ContestantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contestant]!
  user(where: UserWhereUniqueInput!): User
  points(where: PointsWhereUniqueInput!): Points
  episode(where: EpisodeWhereUniqueInput!): Episode
  tribe(where: TribeWhereUniqueInput!): Tribe
  contestant(where: ContestantWhereUniqueInput!): Contestant
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  pointsesConnection(where: PointsWhereInput, orderBy: PointsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PointsConnection!
  episodesConnection(where: EpisodeWhereInput, orderBy: EpisodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EpisodeConnection!
  tribesConnection(where: TribeWhereInput, orderBy: TribeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TribeConnection!
  contestantsConnection(where: ContestantWhereInput, orderBy: ContestantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestantConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  points(where: PointsSubscriptionWhereInput): PointsSubscriptionPayload
  episode(where: EpisodeSubscriptionWhereInput): EpisodeSubscriptionPayload
  tribe(where: TribeSubscriptionWhereInput): TribeSubscriptionPayload
  contestant(where: ContestantSubscriptionWhereInput): ContestantSubscriptionPayload
}

type Tribe implements Node {
  id: ID!
  name: String!
  color: String!
}

"""A connection to a list of items."""
type TribeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TribeEdge]!
  aggregate: AggregateTribe!
}

input TribeCreateInput {
  name: String!
  color: String!
}

input TribeCreateOneInput {
  create: TribeCreateInput
  connect: TribeWhereUniqueInput
}

"""An edge in a connection."""
type TribeEdge {
  """The item at the end of the edge."""
  node: Tribe!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TribeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  color_ASC
  color_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TribePreviousValues {
  id: ID!
  name: String!
  color: String!
}

type TribeSubscriptionPayload {
  mutation: MutationType!
  node: Tribe
  updatedFields: [String!]
  previousValues: TribePreviousValues
}

input TribeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TribeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TribeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TribeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TribeWhereInput
}

input TribeUpdateDataInput {
  name: String
  color: String
}

input TribeUpdateInput {
  name: String
  color: String
}

input TribeUpdateManyMutationInput {
  name: String
  color: String
}

input TribeUpdateOneRequiredInput {
  create: TribeCreateInput
  connect: TribeWhereUniqueInput
  update: TribeUpdateDataInput
  upsert: TribeUpsertNestedInput
}

input TribeUpsertNestedInput {
  update: TribeUpdateDataInput!
  create: TribeCreateInput!
}

input TribeWhereInput {
  """Logical AND on all given filters."""
  AND: [TribeWhereInput!]

  """Logical OR on all given filters."""
  OR: [TribeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TribeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
}

input TribeWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
